name: Attach ZIP to Release

on:
  push:
    branches:
      - master

jobs:
  attach-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Module Version
        id: get_version
        run: |
          MODULE_FILE="dropday.php"
          if [ ! -f "$MODULE_FILE" ]; then
            echo "dropday.php not found. Exiting."
            exit 1
          fi
          VERSION=$(sed -nE 's/^\s*\$this->version\s*=\s*["'\'']([^"'\'' ]+)["'\''];/\1/p' "$MODULE_FILE")
          if [ -z "$VERSION" ]; then
            echo "Version not found in $MODULE_FILE. Exiting."
            exit 1
          fi
          echo "MODULE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"  # Display for debugging

      - name: Check if release already exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_EXISTS=$(gh release view "${MODULE_VERSION}" > /dev/null 2>&1 && echo "true" || echo "false")
          echo "RELEASE_EXISTS=${RELEASE_EXISTS}" >> $GITHUB_ENV
          echo "Checking if release ${MODULE_VERSION} exists: ${RELEASE_EXISTS}"

      - name: Create ZIP Archive
        if: env.RELEASE_EXISTS == 'false'
        run: zip -r "dropday.zip" . -x "*.git*" -x ".env" -x "docker-compose.yml"

      - name: Create GitHub Release
        if: env.RELEASE_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${MODULE_VERSION}" "dropday.zip" \
            --title "${MODULE_VERSION}" \
            --notes "Release version ${MODULE_VERSION}." \
            --draft

      - name: Upload Release Asset via GitHub CLI
        if: env.RELEASE_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "${MODULE_VERSION}" "dropday.zip" --clobber --repo "${{ github.repository }}"
